plugins {
  id 'application'
  id 'java'
  id 'jacoco'
  id("org.jsonschema2pojo") version "1.2.2"
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.4'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.1.0.5360'

  id 'com.diffplug.spotless' version '7.0.3'

  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.65'
  id "au.com.dius.pact" version "4.6.17"
}

group = 'uk.gov.moj.cp'
version = '0.0.1'

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21

  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {

  main {
    java {
      srcDir "$buildDir/generated/src/main/java"
    }
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  pactContractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/pactContractTest/java')
    }
    resources.srcDir file('src/pactContractTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  pactContractTestImplementation.extendsFrom testImplementation
  pactContractTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task pactContractTest(type: Test) {
  description = "Runs Pact consumer contract tests"
  group = "Verification"
  testClassesDirs = sourceSets.pactContractTest.output.classesDirs
  classpath = sourceSets.pactContractTest.runtimeClasspath
  shouldRunAfter test
  useJUnitPlatform()
}

tasks.named('check') {
  dependsOn tasks.named('pactContractTest')
}

tasks.named('processPactContractTestResources') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "API CP :: stg-track-my-case-service"
    property "sonar.projectKey", "uk.gov.moj.cp:stg-track-my-case-service"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://jitpack.io'
  }
}

ext {
  log4JVersion = "2.24.3"
  logbackVersion = "1.5.18"
  lombokVersion = "1.18.38"
  springBootVersion = "3.4.4"
}

ext['snakeyaml.version'] = '2.0'

tasks.named('compileJava') {
  dependsOn tasks.named('spotlessApply')
}


tasks.withType(Checkstyle).configureEach {
  def generatedDir = file("${buildDir}/generated").canonicalPath
  source = source.filter { file ->
    !file.canonicalPath.startsWith(generatedDir)
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-aop'
  implementation 'org.springframework.boot:spring-boot-starter-json'

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.flywaydb:flyway-core:10.18.2'
  implementation 'org.flywaydb:flyway-database-postgresql:10.18.2'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.postgresql:postgresql'
  testImplementation "com.h2database:h2:2.2.224"

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.6'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

  implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.1'

  implementation 'org.hibernate.validator:hibernate-validator:8.0.2.Final'

  implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  implementation("org.json:json:20210307")

  testImplementation(platform('org.junit:junit-bom:5.12.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion, {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation 'au.com.dius.pact.consumer:junit5:4.6.4'

}

application {
  mainClass = 'uk.gov.moj.cp.Application'
}

bootJar {
  archiveFileName = "stg-track-my-case-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

jsonSchema2Pojo {
  source = files("src/main/resources/schema") // <-- path to your JSON Schema files
  targetPackage = 'com.moj.generated'     // <-- your desired package name
  targetDirectory = file("$buildDir/generated-sources/js2p")
  includeGeneratedAnnotation = true
  usePrimitives = true
  includeConstructors = true
  annotationStyle = "jackson2"
}

sourceSets {
  main {
    java {
      srcDir "$buildDir/generated-sources/js2p"
    }
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

pact {
  publish {
    pactBrokerUrl = 'https://hmcts-dts.pactflow.io'
    pactBrokerToken = project.findProperty('PACT_BROKER_TOKEN') ?: System.getenv('PACT_BROKER_TOKEN')
    consumerVersion = project.findProperty('GIT_COMMIT') ?: System.getenv('GIT_COMMIT') ?: 'dev'
    tags = [System.getenv('PACT_ENV') ?: 'dev']
    consumerBranch = System.getenv('GIT_BRANCH') ?: 'dev'
  }
}

